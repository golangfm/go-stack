// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sum.proto

package client_side_stream

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Req struct {
	Val                  *int32   `protobuf:"varint,1,req,name=val" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_sum_09f413fa1e7d368c, []int{0}
}
func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (dst *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(dst, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetVal() int32 {
	if m != nil && m.Val != nil {
		return *m.Val
	}
	return 0
}

type Res struct {
	Result               *int32   `protobuf:"varint,1,req,name=result" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Res) Reset()         { *m = Res{} }
func (m *Res) String() string { return proto.CompactTextString(m) }
func (*Res) ProtoMessage()    {}
func (*Res) Descriptor() ([]byte, []int) {
	return fileDescriptor_sum_09f413fa1e7d368c, []int{1}
}
func (m *Res) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Res.Unmarshal(m, b)
}
func (m *Res) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Res.Marshal(b, m, deterministic)
}
func (dst *Res) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Res.Merge(dst, src)
}
func (m *Res) XXX_Size() int {
	return xxx_messageInfo_Res.Size(m)
}
func (m *Res) XXX_DiscardUnknown() {
	xxx_messageInfo_Res.DiscardUnknown(m)
}

var xxx_messageInfo_Res proto.InternalMessageInfo

func (m *Res) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*Req)(nil), "client.side.stream.Req")
	proto.RegisterType((*Res)(nil), "client.side.stream.Res")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalcClient is the client API for Calc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalcClient interface {
	Sum(ctx context.Context, opts ...grpc.CallOption) (Calc_SumClient, error)
}

type calcClient struct {
	cc *grpc.ClientConn
}

func NewCalcClient(cc *grpc.ClientConn) CalcClient {
	return &calcClient{cc}
}

func (c *calcClient) Sum(ctx context.Context, opts ...grpc.CallOption) (Calc_SumClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calc_serviceDesc.Streams[0], "/client.side.stream.Calc/Sum", opts...)
	if err != nil {
		return nil, err
	}
	x := &calcSumClient{stream}
	return x, nil
}

type Calc_SumClient interface {
	Send(*Req) error
	CloseAndRecv() (*Res, error)
	grpc.ClientStream
}

type calcSumClient struct {
	grpc.ClientStream
}

func (x *calcSumClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calcSumClient) CloseAndRecv() (*Res, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalcServer is the server API for Calc service.
type CalcServer interface {
	Sum(Calc_SumServer) error
}

func RegisterCalcServer(s *grpc.Server, srv CalcServer) {
	s.RegisterService(&_Calc_serviceDesc, srv)
}

func _Calc_Sum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalcServer).Sum(&calcSumServer{stream})
}

type Calc_SumServer interface {
	SendAndClose(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type calcSumServer struct {
	grpc.ServerStream
}

func (x *calcSumServer) SendAndClose(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calcSumServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Calc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "client.side.stream.Calc",
	HandlerType: (*CalcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sum",
			Handler:       _Calc_Sum_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sum.proto",
}

func init() { proto.RegisterFile("sum.proto", fileDescriptor_sum_09f413fa1e7d368c) }

var fileDescriptor_sum_09f413fa1e7d368c = []byte{
	// 129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2e, 0xcd, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4a, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0xd1, 0x2b, 0xce,
	0x4c, 0x49, 0xd5, 0x2b, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x55, 0x12, 0xe7, 0x62, 0x0e, 0x4a, 0x2d,
	0x14, 0x12, 0xe0, 0x62, 0x2e, 0x4b, 0xcc, 0x91, 0x60, 0x54, 0x60, 0xd2, 0x60, 0x0d, 0x02, 0x31,
	0x95, 0x64, 0x41, 0x12, 0xc5, 0x42, 0x62, 0x5c, 0x6c, 0x45, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x50,
	0x39, 0x28, 0xcf, 0xc8, 0x99, 0x8b, 0xc5, 0x39, 0x31, 0x27, 0x59, 0xc8, 0x9a, 0x8b, 0x39, 0xb8,
	0x34, 0x57, 0x48, 0x5c, 0x0f, 0xd3, 0x6c, 0xbd, 0xa0, 0xd4, 0x42, 0x29, 0x1c, 0x12, 0xc5, 0x4a,
	0x0c, 0x1a, 0x8c, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x9f, 0xf3, 0x75, 0x9c, 0x00, 0x00,
	0x00,
}
