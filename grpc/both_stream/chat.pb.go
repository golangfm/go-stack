// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package both_stream

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Req struct {
	Input                *string  `protobuf:"bytes,1,req,name=input" json:"input,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Req) Reset()         { *m = Req{} }
func (m *Req) String() string { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()    {}
func (*Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_98198260ca5fa075, []int{0}
}
func (m *Req) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Req.Unmarshal(m, b)
}
func (m *Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Req.Marshal(b, m, deterministic)
}
func (dst *Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Req.Merge(dst, src)
}
func (m *Req) XXX_Size() int {
	return xxx_messageInfo_Req.Size(m)
}
func (m *Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Req.DiscardUnknown(m)
}

var xxx_messageInfo_Req proto.InternalMessageInfo

func (m *Req) GetInput() string {
	if m != nil && m.Input != nil {
		return *m.Input
	}
	return ""
}

type Res struct {
	Output               *string  `protobuf:"bytes,1,req,name=output" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Res) Reset()         { *m = Res{} }
func (m *Res) String() string { return proto.CompactTextString(m) }
func (*Res) ProtoMessage()    {}
func (*Res) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_98198260ca5fa075, []int{1}
}
func (m *Res) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Res.Unmarshal(m, b)
}
func (m *Res) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Res.Marshal(b, m, deterministic)
}
func (dst *Res) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Res.Merge(dst, src)
}
func (m *Res) XXX_Size() int {
	return xxx_messageInfo_Res.Size(m)
}
func (m *Res) XXX_DiscardUnknown() {
	xxx_messageInfo_Res.DiscardUnknown(m)
}

var xxx_messageInfo_Res proto.InternalMessageInfo

func (m *Res) GetOutput() string {
	if m != nil && m.Output != nil {
		return *m.Output
	}
	return ""
}

func init() {
	proto.RegisterType((*Req)(nil), "both.stream.Req")
	proto.RegisterType((*Res)(nil), "both.stream.Res")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatClient interface {
	BidStream(ctx context.Context, opts ...grpc.CallOption) (Chat_BidStreamClient, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) BidStream(ctx context.Context, opts ...grpc.CallOption) (Chat_BidStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chat_serviceDesc.Streams[0], "/both.stream.Chat/BidStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatBidStreamClient{stream}
	return x, nil
}

type Chat_BidStreamClient interface {
	Send(*Req) error
	Recv() (*Res, error)
	grpc.ClientStream
}

type chatBidStreamClient struct {
	grpc.ClientStream
}

func (x *chatBidStreamClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatBidStreamClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer is the server API for Chat service.
type ChatServer interface {
	BidStream(Chat_BidStreamServer) error
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_BidStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).BidStream(&chatBidStreamServer{stream})
}

type Chat_BidStreamServer interface {
	Send(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type chatBidStreamServer struct {
	grpc.ServerStream
}

func (x *chatBidStreamServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatBidStreamServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "both.stream.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidStream",
			Handler:       _Chat_BidStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_chat_98198260ca5fa075) }

var fileDescriptor_chat_98198260ca5fa075 = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0x48, 0x2c,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4e, 0xca, 0x2f, 0xc9, 0xd0, 0x2b, 0x2e, 0x29,
	0x4a, 0x4d, 0xcc, 0x55, 0x92, 0xe6, 0x62, 0x0e, 0x4a, 0x2d, 0x14, 0x12, 0xe1, 0x62, 0xcd, 0xcc,
	0x2b, 0x28, 0x2d, 0x91, 0x60, 0x54, 0x60, 0xd2, 0xe0, 0x0c, 0x82, 0x70, 0x94, 0x64, 0x41, 0x92,
	0xc5, 0x42, 0x62, 0x5c, 0x6c, 0xf9, 0xa5, 0x25, 0x08, 0x59, 0x28, 0xcf, 0xc8, 0x96, 0x8b, 0xc5,
	0x39, 0x23, 0xb1, 0x44, 0xc8, 0x94, 0x8b, 0xd3, 0x29, 0x33, 0x25, 0x18, 0x6c, 0xa0, 0x90, 0x80,
	0x1e, 0x92, 0xf1, 0x7a, 0x41, 0xa9, 0x85, 0x52, 0xe8, 0x22, 0xc5, 0x4a, 0x0c, 0x1a, 0x8c, 0x06,
	0x8c, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x53, 0xb5, 0xb4, 0x10, 0x94, 0x00, 0x00, 0x00,
}
